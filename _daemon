#!/usr/bin/perl -w

use strict;
use lib "/opt/Daemon";
use Chj_library;


our $bufsize= 4096; # bytes
our $default_maxmessagesize= 100; # number of buffers of $bufsize

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname

  Requires the DAEMON_SOCKET, DAEMON_SOCKET_GROUP, and either
  DAEMON_MAINPROGRAM env vars to be set.

  Optionally accepts the environment variables:

    DEBUG as boolean

    DAEMON_MAXMESSAGESIZE (number of buffers of $bufsize bytes) to
    override the default of $default_maxmessagesize

";
exit (@_ ? 1 : 0);
}

usage if @ARGV;
our $DEBUG= $ENV{DEBUG};
our $socketpath= xenv "DAEMON_SOCKET";
our $socket_group= xenv "DAEMON_SOCKET_GROUP";
our $mainprogram= xenv "DAEMON_MAINPROGRAM";
our $maxmessagesize = $ENV{DAEMON_MAXMESSAGESIZE} || $default_maxmessagesize;

use IO::Socket::UNIX;

our $orig_umask= umask;

umask 0600
  or die "umask: $!";

unlink $socketpath; #okay?  check for running daemons...
our $socket= IO::Socket::UNIX->new
  (
   Type=> SOCK_STREAM,
   Local=> $socketpath,
   Listen=> 1,
  )
  or die "opening socket '$socketpath': $!";#!

umask $orig_umask
  or die "umask: $!";

if (length $socket_group) {
    my @s= stat $socketpath or die;
    my $gid= getgrnam $socket_group
      or die "unknown group '$socket_group'";
    chown $s[4], $gid, $socketpath
      or die "chown: $!";
    chmod 0620, $socketpath
      or die "chmod: $!";
} else {
    chmod 0622, $socketpath
      or die "chmod: $!";
}


while(1) {
    my $conn= $socket->accept
      or do {
	  if ($! == 4) {# XX: get constant from POSIX instead
	      # OS error code   4:  Interrupted system call
	      redo
	  } else {
	      die "accept: $!";
	  }
      };
    warn "got a connection from ".$conn->peername if $DEBUG;
    # ^ XX: convert to a human-readable string

    my $exit_0= bless ["exit 0"],"EXN";
    eval {
	my $buf;
	my $while_read_buf= sub {
	    @_==2 or die;
	    my ($send_buf,$abort)=@_;
	    warn "reading connection in $$" if $DEBUG;
	    my $loop;
	    my $end= sub {
		undef $loop # (break reference cycle)
	    };
	    my $n=0;
	    $loop= sub {
		$n++;
		my $next=
		   (($n < $maxmessagesize) ?
		    ((read $conn, $buf, $bufsize) ?
		     &$send_buf($end, $loop)
		     :
		     $end)
		    :
		    sub {
			warn "max message size has been exceeded, aborting (in daemon child $$)";
			&$abort
		    });
		goto $next;
	    };
	    &$loop;
	    warn "finished reading in $$" if $DEBUG;
	};
	$SIG{CHLD}= 'DEFAULT'; # not IGNORE, correct?

	my ($r,$w)= xpipe;
	if (my $pid= xfork) {
	    xclose $r;
	    $SIG{PIPE}= 'IGNORE';
	    &$while_read_buf
	      (sub {
		   my ($stop,$continue)=@_;
		   # we don't die on errors, but signal
		   # $stop explicitely (capturing
		   # exceptions would be an alternative
		   # but I don't like examining exception
		   # texts to determine what happened)
		   if (print $w $buf) {
		       $continue
		   } else {
		       warn "writing to pipe to main program: $!";
		       $stop
		   }
	       },
	       sub {
		   # in case of abort, kill the child
		   # (the child is not a process group
		   # leader; running setsid in the child
		   # would be a bad idea because that would
		   # prevent individual mainprogram
		   # invocations from being killed by
		   # _startstop; or would that be ok?)
		   kill 2, $pid;
		   # don't care about child exit status.
		   # but should we wait for it anyway? 
		   # maybe a good idea.
		   xwaitpid $pid, 0;
		   warn "child $pid exited with $? (in $$)" if $DEBUG;
		   # send error to client:
		   xprint_to $conn, "err: message too big";
		   xclose $conn;
		   # (success exit code since we are ok, the
		   # error has been sent to the right place
		   # already: )
		   die $exit_0;
	       });
	    xclose $w;

	    xwaitpid $pid, 0;
	    my $exitcode= $?;
	    warn "main process exited to $$, code $exitcode" if $DEBUG;
	    xprint_to $conn, "ok: $exitcode";
	    xclose $conn;
	    die $exit_0;
	} else {
	    xclose $w;
	    xdup2 $r, 0;
	    warn "going to exec in $$, '$mainprogram'" if $DEBUG;
	    xexec $mainprogram;
	}
    };
    my $e=$@;
    if (ref $e or $e) {
	if ($e == $exit_0) {
	    # ok
	} else {
	    warn "got exception: $e";
	}
    }
    warn "going to accept again" if $DEBUG;
}

