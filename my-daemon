#!/usr/bin/perl -w

use strict;

our $servicename="my-daemon";
our $pidfile="/var/run/$servicename.pid";
our $lockfile="/var/run/$servicename.lck";
our $daemon="/opt/my-daemon/daemon";  # change to the full path to the daemon script

use Fcntl ':flock';
use POSIX qw(setsid O_CREAT O_WRONLY);

sub msg {
    print @_,"\n"
}

sub try_lock {
    # set up to get the close-on-exec flag cleared for the lockfh
    local $^F= 9999;
    # filehandle we will flock
    sysopen my $lockfh, $lockfile, O_CREAT|O_WRONLY, 0600
      or die $!;
    if (flock $lockfh, LOCK_EX|LOCK_NB) {
	$lockfh
    } else {
	undef
    }
}

sub xfork {
    my $pid=fork;
    defined $pid or die "fork: $!";
    $pid
}

sub xexec {
    exec @_
      or exit 127;
}

sub xclose {
    my ($fh)=@_;
    close $fh
      or die "close $fh: $!";
}

sub xdup2 {
    my $self=shift;
    my $myfileno= CORE::fileno $self;
    defined $myfileno
      or die;
    require POSIX;
    for my $dup (@_) {
	my $fileno= $dup=~ /^\d+\z/s ? $dup : die;
	POSIX::dup2($myfileno,$fileno)
	  or die "xdup2 (fd $myfileno) to $dup (fd $fileno): $!";
    }
}


sub start {
    if (my $lockfh= try_lock) {
	if (my $pid = xfork) {
	    open my $pidfh, ">", $pidfile
	      or die $!;
	    print $pidfh "$pid\n"
	      or die $!;
	    xclose $pidfh;
	} else {
	    # child
	    setsid
	      or die $!;
	    # chdir "/";
	    open my $null, '+<', "/dev/null"
	      or die "could not open /dev/null: $!";
	    xdup2 $null, 0;
	    # set up loggging and run daemon:
	    pipe my $r, my $w
	      or die $!;
	    if (xfork) {
		xclose $r;
		xdup2 $w, 1;
		xdup2 $w, 2;
		xclose $w;
		xexec $daemon;
	    } else {
		xclose $w;
		xdup2 $r, 0;
		xclose $r;
		xdup2 $null, 1;
		xdup2 $null, 2;
		xexec "logger", "-t", $servicename
	    }
	}
    } else {
	msg "already running."
    }
}

sub stop {
    if (my $lockfh= try_lock) {
	msg "not running.";
    } else {
	open my $pidfh, "<", $pidfile
	  or die $!;
	my $pid= <$pidfh>; chomp $pid;
	xclose $pidfh;
	# kill the process group:
	kill -2, $pid
	  or warn "could not kill $pid: $!";
	# wait until it ended:
	my $t=0;
	my $sleeptime= 0.1; # seconds
	my $msginterval = int(5 / $sleeptime); # every .. seconds
	my $endt= 30 / $sleeptime; # SIGKILL after .. seconds
	while (kill 0, -$pid) {
	    if ($t > $endt) {
		if (kill -9, $pid) {
		    msg "forcibly killed service with SIGKILL"
		} else {
		    warn "could not kill, stopped right before sending signal 9?: $!";
		}
		last;
	    }
	    $t++;
	    if (not $t % $msginterval) {
		msg ("still waiting for termination, will send SIGKILL in ".
		     (($endt - $t) * $sleeptime).
		     " seconds");
	    }
	    # sleep a bit:
	    select undef,undef,undef, $sleeptime;
	}
    }
}

sub usage {
    msg "usage: $0 start|stop|restart";
    exit 1;
}

my ($cmd)= @ARGV;
$cmd or usage;

my $cmds=
  +{
    stop=> \&stop,
    start=> \&start,
    restart=> sub {
	stop;
	start;
    },
   };

my $c= $$cmds{$cmd}
  or usage;
&$c;
