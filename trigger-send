#!/usr/bin/perl -w

# Mit Feb 13 13:35:53 CET 2008
(my $email='chrjae%gmail,com')=~ tr/%,/@./;

use strict;

our $timeout=10;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname socketpath [ arguments ]

  Send a trigger message to a trigger-listen instance.  If arguments
  are given, those are sent with the message, but trigger-listen must
  have been started with --accept-arguments in this case or it will
  ignore the message.

  Options:
  --timeout seconds   instead of the default $timeout

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "timeout"=> \$timeout,
	   ) or exit 1;
usage unless @ARGV;

our $socketpath= shift @ARGV;

use IO::Socket::UNIX;

$SIG{ALRM}= sub {
    die "$myname on '$socketpath': timed out\n";
};
alarm $timeout;

our $socket= IO::Socket::UNIX->new
  (
   Type=> SOCK_STREAM,
   Peer=> $socketpath,
  )
  or die "opening socket '$socketpath': $!";#!

$socket->send(join("\0", @ARGV))
  or die "send: $!";

my $result= <$socket>;

my ($exitcode)= $result=~ /^(\d+)$/
  or die "invalid reply";

$socket->close
  or die "close: $!";

if ($exitcode==0 or $exitcode > 255) {
    exit ($exitcode << 8);
} else {
    die "$myname: remote process died with signal $exitcode\n";
}

